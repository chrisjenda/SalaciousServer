import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_UNIX
import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_UNIX
import static org.apache.tools.ant.taskdefs.condition.Os.isFamily
import static org.apache.tools.ant.taskdefs.condition.Os.isFamily

plugins {
	id 'java'
	id 'application'
	id "com.diffplug.spotless" version "6.7.2"
	id "net.ltgt.errorprone" version "2.0.2"
	id "com.github.johnrengelman.shadow" version "7.1.2"
}

// Salacious Updated Version to Custom String
group 'SalaciousServer'
def Version = '1.0'
version = Version

def PZGameFolder = '/home/chris/ZomboidGame/serve'

project.gradle.startParameter.excludedTaskNames.add(':processResources')
project.gradle.startParameter.excludedTaskNames.add(':prepareKotlinBuildScriptModel')
project.gradle.startParameter.excludedTaskNames.add(':compileTestJava')
project.gradle.startParameter.excludedTaskNames.add(':processTestResources')
project.gradle.startParameter.excludedTaskNames.add(':shadowDistZip')
project.gradle.startParameter.excludedTaskNames.add(':test')
project.gradle.startParameter.excludedTaskNames.add(':distTar')
project.gradle.startParameter.excludedTaskNames.add(':distZip')

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
		vendor = JvmVendorSpec.AZUL
	}
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	java {
		toggleOffOn()
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		toggleOffOn()
		googleJavaFormat().reflowLongStrings(false)
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

allprojects {
	afterEvaluate {
		def spotless = tasks.findByName('spotlessApply')
		if (spotless) {
			tasks.withType(JavaCompile) {
				finalizedBy(spotless)
			}
		}
	}
}

tasks.withType(JavaCompile) {
	options.errorprone.disableWarningsInGeneratedCode = true
	options.compilerArgs << '-Xlint:unchecked'
	options.deprecation = true
}

repositories {
	mavenCentral()
	maven {
		url "https://jitpack.io"
	}
}

// Salacious Updated Java from 15 to 17
compileJava {
	options.release = 17
}

dependencies {
	implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'

	implementation 'org.jetbrains:annotations:23.0.0'

	// Runtime Bytecode Injection/manipulation
	implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.12.12'
	implementation 'org.ow2.asm:asm:9.3'
	implementation 'org.ow2.asm:asm-tree:9.3'
	implementation 'org.ow2.asm:asm-util:9.3'

	// Logging
	implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
	implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.18.0'

	// Discord Bot
	implementation 'org.javacord:javacord:3.4.0'

	// Discord Bot Commands System
	implementation 'de.btobastian.sdcf4j:sdcf4j-core:1.0.10'
	implementation 'de.btobastian.sdcf4j:sdcf4j-javacord:1.0.10'

	// Webserver
	implementation 'io.javalin:javalin:4.6.3'
	implementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.3'

	errorprone("com.google.errorprone:error_prone_core:2.14.0")
	compileOnly files(PZGameFolder + "/java")

	// TODO: Actually implement testing
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0-M1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0-M1'
}

startShadowScripts {
	applicationName = "SalaciousServer"
	def Djavalibrary = "-Djava.library.path=linux64:natives:.:jre64/lib/amd64"
	if (!isFamily(FAMILY_UNIX)) {
		Djavalibrary = "-Djava.library.path=./natives/;./natives/win64/;./"
	}

	defaultJvmOpts = ["-Dzomboid.steam=0",
					"-Djava.awt.headless=true",
					"-Xms1800m",
					"-Xmx4096m",
					"-Dzomboid.znetlog=1",
					Djavalibrary,
					"-XX:+UnlockExperimentalVMOptions",
					"-XX:+UseZGC",
					"-javaagent:./java/" + jar.archiveFileName.get(),
	]
	executableDir = ''
	mainClass = 'SalaciousServer.Main'
	doLast {

		// Inject Auto Kill old Server Processes Function
		unixScript.text = unixScript.text.replace(
				'SAVED="`pwd`"',
				'\npz_pid=$(pgrep -if \'java -Dzomboid.steam\')\n' +
						'counter=1\n' +
						'while ! [ -z $pz_pid ]\n' +
						'do\n' +
						'    if [ $counter -gt 15 ]; then\n' +
						'        break\n' +
						'    fi\n' +
						'    kill -9 $pz_pid\n' +
						'    ((counter++))\n' +
						'done\n' +
						'SAVED="`pwd`"\n')

		unixScript.text = unixScript.text.replace(
				"-Dzomboid.steam=0",
				'-Dzomboid.steam=0" ' + '"-Duser.home=${APP_HOME}')

		// Add Complex Java options and lwjgl path
		unixScript.text = unixScript.text.replace(
				'"-javaagent:./java/' + jar.archiveFileName.get().replace("-" + Version + ".jar", "") + "-" + version + '.jar"',
				"-javaagent:./java/" + jar.archiveFileName.get().replace("-" + Version + ".jar", "") + "-" + version + ".jar " + "--add-opens java.base/java.lang.reflect=ALL-UNNAMED " + '-Dorg.lwjgl.librarypath=${APP_HOME}')

		windowsScript.text = windowsScript.text.replace(
				'-javaagent:./java/' + jar.archiveFileName.get().replace("-" + Version + ".jar", "") + "-" + version + '.jar',
				"-javaagent:./java/" + jar.archiveFileName.get().replace("-" + Version + ".jar", "") + "-" + version + ".jar " + "--add-opens java.base/java.lang.reflect=ALL-UNNAMED " + '-Dorg.lwjgl.librarypath=%APP_HOME%')

		// Fix Classpath and add Game Class Path
		unixScript.text = unixScript.text.replace(
				'CLASSPATH=$APP_HOME/lib/' + jar.archiveFileName.get(),
				'CLASSPATH="$APP_HOME/java/' + jar.archiveFileName.get() +
						':$APP_HOME/java/*:$APP_HOME/java/."')

		windowsScript.text = windowsScript.text.replace(
				'CLASSPATH=%APP_HOME%\\lib\\' + jar.archiveFileName.get(),
				'CLASSPATH=%APP_HOME%java\\' + jar.archiveFileName.get() +
						';%APP_HOME%java\\*;%APP_HOME%java\\.;%APP_HOME%java\\libs\\*')
		// Fix Eval
		unixScript.text = unixScript.text.replace(
				'eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $SALACIOUS_SERVER_OPTS -jar "\\"$CLASSPATH\\"" "$APP_ARGS"',
				'eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $SALACIOUS_SERVER_OPTS -classpath "$CLASSPATH" SalaciousServer.Main $@')

		windowsScript.text = windowsScript.text.replace(
				'"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %SALACIOUS_SERVER_OPTS%  -jar "%CLASSPATH%" %CMD_LINE_ARGS%',
				'"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %SALACIOUS_SERVER_OPTS% -classpath "%CLASSPATH%" SalaciousServer.Main %*')
	}

	if (isFamily(FAMILY_UNIX)) {
		windowsScript.delete()
	} else {
		unixScript.delete()
	}

}

tasks.named('jar') {
	manifest {
		attributes('Premain-Class' : 'SalaciousServer.Main',
				'Agent-Class' : 'SalaciousServer.Main',
				'Main-Class': 'SalaciousServer.Main',
				'Can-Redefine-Classes': 'true',
				'Can-Retransform-Classes': 'true',
				'Can-Set-Native-Method-Prefix' : 'true',
		)
	}
	from {
		duplicatesStrategy = DuplicatesStrategy.EXCLUDE
		configurations.runtimeClasspath.filter{!it.isDirectory()}.collect {
			zipTree(it)
		}
	}
}


application {
	mainClass = 'SalaciousServer.Main'
	executableDir = ''
	applicationName = "SalaciousServer"
	def Djavalibrary = "-Djava.library.path=linux64:natives:.:jre64/lib/amd64"
	if (!isFamily(FAMILY_UNIX)) {
		Djavalibrary = "-Djava.library.path=./natives/;./natives/win64/;./"
	}
	applicationDefaultJvmArgs = ["-Dzomboid.steam=0",
								"-Djava.awt.headless=true",
								"-Xms1800m",
								"-Xmx4096m",
								"-Dzomboid.znetlog=1",
								Djavalibrary,
								"-XX:+UnlockExperimentalVMOptions",
								"-XX:+UseZGC",
								"-javaagent:./java/" + jar.archiveFileName.get(),
	]
}

shadowJar {
	archiveBaseName.set(jar.archiveFileName.get().replace(".jar", ""))
	archiveClassifier.set('')
	archiveVersion.set('')
}

jar {
	manifest {
		attributes('Premain-Class': 'SalaciousServer.Main',
				'Agent-Class': 'SalaciousServer.Main',
				'Main-Class': 'SalaciousServer.Main',
				'Can-Redefine-Classes': 'true',
				'Can-Retransform-Classes': 'true',
				'Can-Set-Native-Method-Prefix': 'true',
		)
	}
	destinationDirectory.set(file("$buildDir"))
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
}

// TODO: Copy files directly from archive and into new archive
// Extract Dist Arcive to Work Directory
task unzip(type: Copy) {
	def outputDir = file("${buildDir}/unpacked/dist")
	mustRunAfter shadowDistTar
	from tarTree("$buildDir/distributions/" + jar.archiveFileName.get().replace("-" + Version + ".jar", "") +
			"-shadow-" + version + ".tar")
	into outputDir

	mkdir "${buildDir}/unpacked/working"
	mkdir "${buildDir}/unpacked/working/java"
}
tasks.named("shadowDistTar") { finalizedBy("unzip") }

// Create new folder schema for new Distribution
task buildRedist(type: Copy) {
	mustRunAfter unzip
	into "${buildDir}/unpacked"
	into("working") {
		from file("${buildDir}/unpacked/dist/" + jar.archiveFileName.get().replace("-" + Version + ".jar", "") +
				"-shadow-" + version + "/bin/" +
				jar.archiveFileName.get().replace("-" + Version + ".jar", "") + (isFamily(FAMILY_UNIX) ? "" : ".bat"))
	}
	into("working/java") {
		from file("${buildDir}/unpacked/dist/" + jar.archiveFileName.get().replace("-" + Version + ".jar", "") +
				"-shadow-" + version + "/lib/" + jar.archiveFileName.get().replace("-" + Version + ".jar", "") +
				"-" + version + ".jar")
	}
}
tasks.named("unzip") { finalizedBy("buildRedist") }

// Repack the new distribution into a tgz
task redist(type: Tar) {
	mustRunAfter buildRedist
	archiveBaseName = jar.archiveFileName.get().replace("-" + Version + ".jar", "")
	destinationDirectory = file("${buildDir}/distributions/")
	if (isFamily(FAMILY_UNIX)) {
		archiveExtension = 'tgz'
		compression = Compression.GZIP
	} else {
		archiveExtension = 'zip'
	}
	from files("${buildDir}/unpacked/working")
}
tasks.named("buildRedist") { finalizedBy("redist") }

// Cleanup the Build/Work directory
tasks.register('cleanUnusedDist', Delete) {
	mustRunAfter redist
	delete fileTree("${buildDir}/distributions/").matching {
		include "**/*.*"
		exclude (isFamily(FAMILY_UNIX) ? "**/*.tgz" : "**/*.zip")
	}
	delete "${buildDir}/unpacked"
	delete "${buildDir}/" + jar.archiveFileName.get().replace("-" + Version + ".jar", "") + "-" + version + ".jar"
}
tasks.named("redist") { finalizedBy("cleanUnusedDist") }

// Part 1 of Mod Installation (Mod)
task installMod(type: Copy)  {
	mustRunAfter redist
	from tarTree("$buildDir/distributions/" + jar.archiveFileName.get().replace(".jar", (isFamily(FAMILY_UNIX) ? ".tgz" : ".zip")))
	into file(PZGameFolder)
}
tasks.named("redist") { finalizedBy("installMod") }

/*
// Part 2 of Mod Installation (Webserver Resources)
task installResources(type: Copy)  {
	mustRunAfter installMod
	from fileTree("${buildDir}/../src/main/resources")
	into PZGameFolder +"/java"
	exclude "poster.png"
}
tasks.named("installMod") { finalizedBy("installResources") }

 */
