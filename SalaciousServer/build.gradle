import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_UNIX
import static org.apache.tools.ant.taskdefs.condition.Os.isFamily

plugins {
    id 'java-library'
    id 'net.ltgt.errorprone' version '2.0.2'
}

def PZGameFolder = '/home/chris/ZomboidGame/serve'
def PZGameCacheFolder = PZGameFolder + '/Zomboid'

group 'salaciousserver'
version = modssversion

// Disable Unused Tasks
project.gradle.startParameter.excludedTaskNames.add(':processResources')
project.gradle.startParameter.excludedTaskNames.add(':processTestResources')
project.gradle.startParameter.excludedTaskNames.add(':test')

java {
    // Salacious Added Toolchain Compatability and updated java from jdk15 to Zulu17.30+15-CA
    //sourceCompatibility = 1.15
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.AZUL
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

jar { destinationDirectory.set(file("$buildDir")) }

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

// You will need to first build ZomboidJavaHook (or have downloaded it and changed this path)
dependencies {
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    implementation group: 'net.uptheinter', name: 'interceptify', version: '1.2.2'
    implementation 'org.javacord:javacord:3.4.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'de.btobastian.sdcf4j:sdcf4j-core:1.0.10'
    implementation 'de.btobastian.sdcf4j:sdcf4j-javacord:1.0.10'
    implementation 'io.javalin:javalin:4.6.3'
    implementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'org.apache.logging.log4j:log4j-iostreams:2.17.2'
    implementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.3'
    errorprone 'com.google.errorprone:error_prone_core:2.14.0'

    compileOnly files(PZGameFolder + "/java")
    compileOnly fileTree('../build/libs')
}

// Only Copy Lua Files if they are present in the project
task checkHasLua() {
    mustRunAfter compileJava
    def hasLua = false
    // Check for Lua Mod Sources
    FileTree tree = fileTree("${buildDir}/../src/main").matching {include '*'}
    tree.visit { d ->
        if (d.name == 'lua')
            hasLua = true
    }
    if (!hasLua)
        project.gradle.startParameter.excludedTaskNames.add(':copyLua')
}
tasks.named("compileJava") { finalizedBy("checkHasLua") }

// Copy Dependencies to libs directory
task copyDeps(type: Copy) {
    mustRunAfter build
    dependsOn configurations.runtimeClasspath
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.runtimeClasspath)
    into("build/projectzomboid/java/libs")
}
tasks.named("build") { finalizedBy("copyDeps") }

// Pre Distro Folder Schema
task preDistro()  {
    mustRunAfter copyDeps
    doLast {

        def workdir = "${buildDir}/unpacked/working/" + modid

        // Create Working Directory
        mkdir workdir
        mkdir workdir + "/java"

        // Create mod.info file
        new File(workdir, "mod.info").text = """name=${modname}
id=${modid}
description=${moddescription}
poster=${modposter}
ssversion=${modssversion}"""

        // Copy mod thumbnail to working directory
        copy {
            from file("${buildDir}/../src/main/resources/poster.png")
            into workdir
        }

        // Copy Java Mod Jar to working directory
        copy {
            from file("${buildDir}/" + jar.archiveFileName.get())
            into workdir + "/java"
        }

        // Create Mods Config file
        //new File("${buildDir}/libs", "PZHook_EnabledMods.cfg").text = "${modid}"
    }
}
tasks.named("copyDeps") { finalizedBy("preDistro") }

task copyLua(type: Copy) {
    mustRunAfter preDistro
    // Copy Lua Mod Sources to working directory
    from fileTree("${buildDir}/../src/main/lua")
    into "${buildDir}/unpacked/working/" + modid
}
tasks.named("preDistro") { finalizedBy("copyLua") }

task copyWebserver(type: Copy) {
    mustRunAfter copyLua
    from fileTree("${buildDir}/../src/main/resources")
    into "${buildDir}/projectzomboid/java"
    exclude "poster.png"
}
tasks.named("copyLua") { finalizedBy("copyWebserver") }

// Repack the new distribution into a tgz
task packModDistro(type: Tar) {
    shouldRunAfter copyLua
    archiveBaseName = jar.archiveFileName.get().replace("-" + modssversion + ".jar", "")
    destinationDirectory = file("${buildDir}/distributions/")
    if (isFamily(FAMILY_UNIX)) {
        archiveExtension = 'tgz'
        compression = Compression.GZIP
    } else {
        archiveExtension = 'zip'
    }
    from files("${buildDir}/unpacked/working")

}
tasks.named("copyWebserver") { finalizedBy("packModDistro") }
tasks.named("copyDeps") { finalizedBy("packModDistro") }

// Repack the new distribution into a tgz
task packLIBSDistro(type: Tar) {
    mustRunAfter packModDistro
    archiveBaseName = jar.archiveFileName.get().replace("-" + modssversion + ".jar", "") + '-LIBS'
    destinationDirectory = file("${buildDir}/distributions/")
    if (isFamily(FAMILY_UNIX)) {
        archiveExtension = 'tgz'
        compression = Compression.GZIP
    } else {
        archiveExtension = 'zip'
    }
    from files("${buildDir}/projectzomboid")
}
tasks.named("packModDistro") { finalizedBy("packLIBSDistro") }

// Cleanup the Build/Work directory
tasks.register('cleanUnusedDist', Delete) {
    mustRunAfter packModDistro
    delete fileTree("${buildDir}/distributions/").matching {
        include "**/*.*"
        exclude (isFamily(FAMILY_UNIX) ? "**/*.tgz" : "**/*.zip")
    }
    delete fileTree("${buildDir}/projectzomboid/java").matching {
        include "**/*.*"
        exclude "libs/*.*"
    }
    delete "${buildDir}/unpacked/working/" + modid
    delete "${buildDir}/" + jar.archiveFileName.get()
}
tasks.named("packLIBSDistro") { finalizedBy("cleanUnusedDist") }

// Part 1 of Mod Installation (Libraries)
task installLibs(type: Copy)  {
    mustRunAfter cleanUnusedDist
    from tarTree("$buildDir/distributions/" +
            jar.archiveFileName.get().replace("-" + modssversion + ".jar", "") + '-LIBS-' + version + (isFamily(FAMILY_UNIX) ? ".tgz" : ".zip"))
    into file(PZGameFolder)
}
tasks.named("cleanUnusedDist") { finalizedBy("installLibs") }

// Part 2 of Mod Installation (Mod)
task installMod(type: Copy)  {
    mustRunAfter installLibs
    from tarTree("$buildDir/distributions/" + jar.archiveFileName.get().replace(".jar", (isFamily(FAMILY_UNIX) ? ".tgz" : ".zip")))
    into file(PZGameCacheFolder + "/mods/")
}
tasks.named("installLibs") { finalizedBy("installMod") }

/*
// Part 3 of Mod Installation (Webserver Resources)
task installResources(type: Copy)  {
    mustRunAfter installMod
    from fileTree("${buildDir}/../src/main/resources")
    into PZGameFolder +"/java"
    exclude "poster.png"
}
tasks.named("installMod") { finalizedBy("installResources") }

 */

test {
    useJUnitPlatform()
}
